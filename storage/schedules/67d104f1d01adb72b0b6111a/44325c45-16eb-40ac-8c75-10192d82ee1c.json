{
  "id": "44325c45-16eb-40ac-8c75-10192d82ee1c",
  "userId": "67d104f1d01adb72b0b6111a",
  "schedule": [
    {
      "title": "DIP105 - Understanding requirements (Session 1/7)",
      "start": "2025-04-08T01:00:00.000Z",
      "end": "2025-04-08T02:00:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Understanding requirements",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 1,
        "totalSessions": 7,
        "stage": "Understanding requirements",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Research (Session 2/7)",
      "start": "2025-04-17T01:00:00.000Z",
      "end": "2025-04-17T02:00:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Research",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 2,
        "totalSessions": 7,
        "stage": "Research",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - First draft (Session 3/7)",
      "start": "2025-04-28T04:15:00.000Z",
      "end": "2025-04-28T05:15:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: First draft",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 3,
        "totalSessions": 7,
        "stage": "First draft",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Review and refine (Session 4/7)",
      "start": "2025-05-06T01:00:00.000Z",
      "end": "2025-05-06T02:00:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Review and refine",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 4,
        "totalSessions": 7,
        "stage": "Review and refine",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Final review (Session 5/7)",
      "start": "2025-05-16T01:00:00.000Z",
      "end": "2025-05-16T02:00:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Final review",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 5,
        "totalSessions": 7,
        "stage": "Final review",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Final review (Session 6/7)",
      "start": "2025-05-26T04:15:00.000Z",
      "end": "2025-05-26T05:15:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Final review",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 6,
        "totalSessions": 7,
        "stage": "Final review",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Final review (Session 7/7)",
      "start": "2025-06-04T01:00:00.000Z",
      "end": "2025-06-04T02:00:00.000Z",
      "allDay": false,
      "category": "study",
      "courseCode": "DIP105",
      "type": "study-session",
      "priority": "high",
      "description": "Study session for Untitled Assignment: Final review",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 7,
        "totalSessions": 7,
        "stage": "Final review",
        "type": "study-session",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    },
    {
      "title": "DIP105 - Final Review Before Deadline",
      "start": "2025-06-16T04:15:00.000Z",
      "end": "2025-06-16T05:15:00.000Z",
      "allDay": false,
      "category": "reminder",
      "courseCode": "DIP105",
      "type": "reminder",
      "priority": "high",
      "description": "Final review session before the deadline for Untitled Assignment",
      "resource": {
        "title": "Untitled Assignment",
        "description": "The mobile app shall provide a game or application for kids to learn. (Shooting game, snake, puzzle, collect eggs, etc..",
        "dueDate": "2025-06-15",
        "weight": 30,
        "complexity": 1,
        "estimatedHours": 0.5,
        "objectives": [],
        "topics": [
          "algorithms",
          "user interface"
        ],
        "courseCode": "DIP105",
        "assignmentNumber": 1,
        "source": "pdf",
        "documentType": "assignment",
        "sourceFile": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "details": {
          "totalHours": 6.5,
          "numberOfSessions": 7,
          "complexity": 5,
          "learningStages": [
            "Understanding requirements",
            "Research",
            "First draft",
            "Review and refine",
            "Final review",
            "Final review",
            "Final review"
          ]
        },
        "sessionNumber": 8,
        "totalSessions": 7,
        "stage": "Final Review",
        "type": "reminder",
        "taskDetails": {
          "tasks": [
            "users score a high score which overwrite one of the 5 highest scores, the app shall play music to celebrate",
            "pseudocode program to solve case study 1 and complete the desk checking",
            "mobile application using App Inventor to solve case study 2",
            "video to guide users on how to use the developed mobile application"
          ],
          "deliverables": [
            "Word document contains your pseudocode and desk checking walk through.",
            "App Inventor back up file (.",
            "Database backup file (depends on which online database you used, if you are using Online TinyDB, then no need) iv.",
            "A video file."
          ]
        },
        "sourceDetails": {
          "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
          "courseCode": "DIP105"
        }
      },
      "pdfDetails": {
        "fileName": "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf",
        "courseCode": "DIP105",
        "extractedText": "\n\nDIP105 \nIntroduction to Computer Architecture  \nAssignment 2 \n              \n \nRelease Date   : 01/07/2025 \nDue Date   : 20/07/2025 before 4.00pm \nValue    : 30% of total assessment \nMarks    : Marked out of 100 \nAssessment Mode  : Individual Assessment \n              \n \nRATIONALE \n \nThis assignment has been designed to allow students to test and demonstrate their understanding \nand  ability  to explain write  algorithms  in the development  of  simple  mobile applications using \nApp Inventor / Thunkable. Upon completion of this coursework, students will be able to: \n \n• CLO2: Construct algorithms to solve computing problems. \n \n \n \n \n \n \n \n \n \n \nCASE STUDY 1 \n\n \nWrite a pseudocode to calculate the average mark for 8 students’ Networking and Programming \ncourses. The program will use a while loop to accept the Networking and Programming marks for \neach  student,  and  then process all input data.  In  the  end, output the  average  marks  for  the \nNetworking and Programming courses. Refer to the sample output below: \n \n“The 8 students’ average mark for Networking course is 80, and the average mark for \nProgramming course is 90.” \n \nStudents  will  need  to  perform  desk  checking  to  walk  through  the  data  changes  in  the  loop in  a \nWord document. \n \n \nCASE STUDY 2: \n \nStudents are required to develop a simple mobile game application to let kindergarten kids \nnowadays  to  learn  in  their  education (Choose  one  lesson  to  teach  >  Mathematic  /  English  / \nMandarin / Malay). There is no restriction on how the complete mobile application will look like \nin the end, all user interface designs, and processing flow are based on the students’ creativity and \nunderstanding. The system requirements of the mobile application are as follows: \n \ni. The  mobile  app  shall  provide a game  or  application  for  kids  to  learn. (Shooting game, \nsnake, puzzle, collect eggs, etc......)  \nii. The mobile app shall update the 5 highest scores into an online database. If the users score \na  high  score  which  overwrite  one  of  the  5  highest scores,  the  app  shall  play music to \ncelebrate. \niii. The mobile app shall be able  to let  the users reset the game / application. If users stop / \nreset  the  game  /  application  while  the  game  /  application  is  running,  no  score  will  be \nupdated into the database. \niv. The  mobile  app  shall  let  the  users enter their  name  if  their  score  is  high  and  going  to \noverwrite one of the 5 highest scores. \nv. The  mobile  app  shall  be  able  to  display the  top 5  highest scores in  an  ascending  order \n\n(Apply sorting algorithm to the program).   \n \nTASKS \ni. Construct a pseudocode program to solve case study 1 and complete the desk checking. \nRecommended completion: 10\nth\n July 2025 \nii. Develop a mobile application using App Inventor to solve case study 2. \nRecommended completion: 28\nth\n July 2025 \niii. Provide a video to guide users on how to use the developed mobile application. \nRecommended completion: 30\nth\n July 2025 \n \nSUBMISSION CHECKLIST \nSoftcopy submitted through LMS link MUST contains all the following items:  \ni. Word document contains your pseudocode and desk checking walk through. \nii. App Inventor back up file (.aia) \niii. Database backup file (depends on which online database you used, if you are using \nOnline TinyDB, then no need) \niv. A video file. \n \nREMARKS \ni. This assignment should be prepared using word processing software with 12 points Times \nNew Roman font, 1.5 spacing, and page numbering. \nii. If you are not clear about the assignment requirements, please contact the tutor. \niii. You may refer materials from textbooks or any other references, but you must acknowledge \nthe quotation, no matter how brief. Failure to do so will result in zero marks being awarded \nfor the assignment. Refer to the AI generative tools remarks below. \niv. A  penalty  of  5  marks  per  working  day (including Saturday) deduction  from  the  marks \nobtained for this assignment will be imposed for late submission. \nv. Students will be awarded fail grade if students did not submit any item in the submission \ncheck list. "
      }
    }
  ],
  "metadata": {
    "title": "Schedule from 1 files",
    "courseCode": "DIP105",
    "fileCount": 1,
    "fileNames": [
      "D:\\GitHub\\studyflow\\uploads\\1744110026821-DIP105_Assignment_2.pdf"
    ],
    "preferences": {
      "studySessionLength": 60,
      "breakLength": 15,
      "maxDailyStudyHours": 4,
      "preferredStudyDays": [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday"
      ],
      "preferredStudyTimeStart": "09:00",
      "preferredStudyTimeEnd": "18:00",
      "spacingPreference": "moderate",
      "productiveTimeOfDay": "morning",
      "procrastinationProfile": "moderate",
      "cognitiveLoadFactors": {
        "exam": 1.5,
        "project": 1.3,
        "assignment": 1,
        "reading": 0.8,
        "homework": 1.1,
        "presentation": 1.3,
        "lab": 1.2
      },
      "maxDailyCognitiveLoad": 5,
      "learningStyle": "balanced",
      "weekendPreference": "minimal",
      "subjectFamiliarity": {},
      "breaksBetweenSessions": true,
      "_id": "67e2badad8a993687032beca",
      "studyHoursPerDay": 6,
      "preferredStudyTimes": [
        "evening",
        "night"
      ],
      "preferredSessionLength": 6,
      "wakeUpTime": "10:00",
      "sleepTime": "00:00",
      "breakDuration": 20,
      "longBreakDuration": 30,
      "sessionsBeforeLongBreak": 4,
      "weekendStudy": true,
      "minimumDaysBetweenSessions": 1,
      "preferSpacedRepetition": true,
      "userId": "67d104f1d01adb72b0b6111a",
      "focusPeriods": [],
      "restPeriods": [],
      "createdAt": "2025-03-25T14:16:58.103Z",
      "updatedAt": "2025-03-29T06:03:27.093Z",
      "__v": 1,
      "dinnerTime": "18:00",
      "eveningRoutineDuration": 30,
      "lunchTime": "12:00",
      "mealDuration": 60,
      "morningRoutineDuration": 30,
      "enableCognitiveOptimization": true
    },
    "createdAt": "2025-04-08T11:00:27.225Z",
    "assignmentCount": 7,
    "classCount": 0
  }
}